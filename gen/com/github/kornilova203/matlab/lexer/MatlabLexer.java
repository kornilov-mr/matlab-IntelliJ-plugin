// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MatlabLexer.flex

package com.github.kornilova203.matlab.lexer;

import com.intellij.lexer.FlexAdapter;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.kornilova203.matlab.psi.MatlabTypes.*;


public class MatlabLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WS_MATTERS = 2;
  public static final int LOOK_FOR_CTRANS = 4;
  public static final int SINGLE_QOUTE_STRING_STATE = 6;
  public static final int BLOCKCOMMENT_STATE = 8;
  public static final int BLOCK_HASH_COMMENT_STATE = 10;
  public static final int LOOK_FOR_LINECOMMENT = 12;
  public static final int LINECOMMENT_STATE = 14;
  public static final int FILE_NAME_STATE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  0,  1,  0,  1,  2,  2,  3,  4,  3,  5,  6,  6,  7,  7, 
     8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\16\0\4\5\1\6"+
    "\1\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\12\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\10\11"+
    "\2\35\20\11\1\36\1\37\1\40\1\41\1\11\1\5"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\35\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\11\1\61\1\62\1\63\1\64\1\11\1\65\1\11"+
    "\1\66\1\11\1\67\1\70\1\71\1\72\6\0\1\73"+
    "\32\0\2\5\4\11\4\5\1\11\2\5\1\0\7\5"+
    "\1\11\4\5\1\11\5\5\27\11\1\5\37\11\1\5"+
    "\u01ca\11\4\5\14\11\16\5\5\11\7\5\1\11\1\5"+
    "\1\11\21\5\160\0\5\11\1\5\2\11\2\5\4\11"+
    "\1\5\1\11\6\5\1\11\1\5\3\11\1\5\1\11"+
    "\1\5\24\11\1\5\123\11\1\5\213\11\1\5\5\0"+
    "\2\5\246\11\1\5\46\11\2\5\1\11\6\5\51\11"+
    "\6\5\1\11\1\5\55\0\1\5\1\0\1\5\2\0"+
    "\1\5\2\0\1\5\1\0\10\5\33\11\4\5\4\11"+
    "\15\5\6\0\5\5\1\11\4\5\13\0\1\5\1\0"+
    "\3\5\53\11\25\0\12\74\4\5\2\11\1\0\143\11"+
    "\1\5\1\11\10\0\1\5\6\0\2\11\2\0\1\5"+
    "\4\0\2\11\12\74\3\11\2\5\1\11\17\5\1\0"+
    "\1\11\1\0\36\11\33\0\2\5\131\11\13\0\1\11"+
    "\16\5\12\74\41\11\11\0\2\11\4\5\1\11\2\5"+
    "\1\0\30\11\4\0\1\11\11\0\1\11\3\0\1\11"+
    "\5\0\22\5\31\11\3\0\4\5\13\11\65\5\25\11"+
    "\1\5\22\11\13\5\61\0\66\11\3\0\1\11\22\0"+
    "\1\11\7\0\12\11\2\0\2\5\12\74\1\5\20\11"+
    "\3\0\1\5\10\11\2\5\2\11\2\5\26\11\1\5"+
    "\7\11\1\5\1\11\3\5\4\11\2\5\1\0\1\11"+
    "\7\0\2\5\2\0\2\5\3\0\1\11\10\5\1\0"+
    "\4\5\2\11\1\5\3\11\2\0\2\5\12\74\4\11"+
    "\7\5\2\11\1\5\1\0\2\5\3\0\1\5\6\11"+
    "\4\5\2\11\2\5\26\11\1\5\7\11\1\5\2\11"+
    "\1\5\2\11\1\5\2\11\2\5\1\0\1\5\5\0"+
    "\4\5\2\0\2\5\3\0\3\5\1\0\7\5\4\11"+
    "\1\5\1\11\7\5\12\74\2\0\3\11\1\0\13\5"+
    "\3\0\1\5\11\11\1\5\3\11\1\5\26\11\1\5"+
    "\7\11\1\5\2\11\1\5\5\11\2\5\1\0\1\11"+
    "\10\0\1\5\3\0\1\5\3\0\2\5\1\11\17\5"+
    "\2\11\2\0\2\5\12\74\1\5\1\11\7\5\1\11"+
    "\6\0\1\5\3\0\1\5\10\11\2\5\2\11\2\5"+
    "\26\11\1\5\7\11\1\5\2\11\1\5\5\11\2\5"+
    "\1\0\1\11\7\0\2\5\2\0\2\5\3\0\7\5"+
    "\3\0\4\5\2\11\1\5\3\11\2\0\2\5\12\74"+
    "\1\5\1\11\20\5\1\0\1\11\1\5\6\11\3\5"+
    "\3\11\1\5\4\11\3\5\2\11\1\5\1\11\1\5"+
    "\2\11\3\5\2\11\3\5\3\11\3\5\14\11\4\5"+
    "\5\0\3\5\3\0\1\5\4\0\2\5\1\11\6\5"+
    "\1\0\16\5\12\74\11\5\1\11\6\5\5\0\10\11"+
    "\1\5\3\11\1\5\27\11\1\5\20\11\3\5\1\11"+
    "\7\0\1\5\3\0\1\5\4\0\7\5\2\0\1\5"+
    "\3\11\5\5\2\11\2\0\2\5\12\74\20\5\1\11"+
    "\3\0\1\5\10\11\1\5\3\11\1\5\27\11\1\5"+
    "\12\11\1\5\5\11\2\5\1\0\1\11\7\0\1\5"+
    "\3\0\1\5\4\0\7\5\2\0\7\5\1\11\1\5"+
    "\2\11\2\0\2\5\12\74\1\5\2\11\15\5\4\0"+
    "\11\11\1\5\3\11\1\5\51\11\2\0\1\11\7\0"+
    "\1\5\3\0\1\5\4\0\1\11\5\5\3\11\1\0"+
    "\7\5\3\11\2\0\2\5\12\74\12\5\6\11\1\5"+
    "\3\0\1\5\22\11\3\5\30\11\1\5\11\11\1\5"+
    "\1\11\2\5\7\11\3\5\1\0\4\5\6\0\1\5"+
    "\1\0\1\5\10\0\6\5\12\74\2\5\2\0\15\5"+
    "\60\11\1\0\2\11\7\0\4\5\10\11\10\0\1\5"+
    "\12\74\47\5\2\11\1\5\1\11\1\5\5\11\1\5"+
    "\30\11\1\5\1\11\1\5\12\11\1\0\2\11\11\0"+
    "\1\11\2\5\5\11\1\5\1\11\1\5\6\0\2\5"+
    "\12\74\2\5\4\11\40\5\1\11\27\5\2\0\6\5"+
    "\12\74\13\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\2\0\10\11\1\5\44\11\4\5\24\0\1\5\2\0"+
    "\5\11\13\0\1\5\44\0\11\5\1\0\71\5\53\11"+
    "\24\0\1\11\12\74\6\5\6\11\4\0\4\11\3\0"+
    "\1\11\3\0\2\11\7\0\3\11\4\0\15\11\14\0"+
    "\1\11\1\0\12\74\4\0\2\5\46\11\1\5\1\11"+
    "\5\5\1\11\2\5\53\11\1\5\115\11\1\5\4\11"+
    "\2\5\7\11\1\5\1\11\1\5\4\11\2\5\51\11"+
    "\1\5\4\11\2\5\41\11\1\5\4\11\2\5\7\11"+
    "\1\5\1\11\1\5\4\11\2\5\17\11\1\5\71\11"+
    "\1\5\4\11\2\5\103\11\2\5\3\0\40\5\20\11"+
    "\20\5\126\11\2\5\6\11\3\5\u016c\11\2\5\21\11"+
    "\1\5\32\11\5\5\113\11\3\5\13\11\7\5\15\11"+
    "\1\5\4\11\3\0\13\5\22\11\3\0\13\5\22\11"+
    "\2\0\14\5\15\11\1\5\3\11\1\5\2\0\14\5"+
    "\64\11\40\0\3\5\1\11\3\5\2\11\1\0\2\5"+
    "\12\74\41\5\4\0\1\5\12\74\6\5\131\11\7\5"+
    "\5\11\2\0\42\11\1\0\1\11\5\5\106\11\12\5"+
    "\37\11\1\5\14\0\4\5\14\0\12\5\12\74\36\11"+
    "\2\5\5\11\13\5\54\11\4\5\32\11\6\5\12\74"+
    "\46\5\27\11\5\0\4\5\65\11\12\0\1\5\35\0"+
    "\2\5\1\0\12\74\6\5\12\74\15\5\1\11\10\5"+
    "\16\0\1\5\2\0\77\5\5\0\57\11\21\0\7\11"+
    "\4\5\12\74\21\5\11\0\14\5\3\0\36\11\15\0"+
    "\2\11\12\74\54\11\16\0\14\5\44\11\24\0\10\5"+
    "\12\74\3\5\3\11\12\74\44\11\2\5\11\11\7\5"+
    "\53\11\2\5\3\11\20\5\3\0\1\5\25\0\4\11"+
    "\1\0\6\11\1\0\2\11\3\0\1\11\5\5\300\11"+
    "\72\0\1\5\5\0\26\11\2\5\6\11\2\5\46\11"+
    "\2\5\6\11\2\5\10\11\1\5\1\11\1\5\1\11"+
    "\1\5\1\11\1\5\37\11\2\5\65\11\1\5\7\11"+
    "\1\5\1\11\3\5\3\11\1\5\7\11\3\5\4\11"+
    "\2\5\6\11\4\5\15\11\5\5\3\11\1\5\7\11"+
    "\16\5\5\0\30\5\2\75\5\0\20\5\2\11\23\5"+
    "\1\11\13\5\5\0\1\5\12\0\1\5\1\11\15\5"+
    "\1\11\20\5\15\11\3\5\40\11\20\5\15\0\4\5"+
    "\1\0\3\5\14\0\21\5\1\11\4\5\1\11\2\5"+
    "\12\11\1\5\1\11\3\5\5\11\6\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\4\11\1\5\13\11\2\5"+
    "\4\11\5\5\5\11\4\5\1\11\21\5\51\11\u0177\5"+
    "\57\11\1\5\57\11\1\5\205\11\6\5\4\11\3\0"+
    "\2\11\14\5\46\11\1\5\1\11\5\5\1\11\2\5"+
    "\70\11\7\5\1\11\17\5\1\0\27\11\11\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\40\0"+
    "\57\5\1\11\325\5\3\11\31\5\11\11\6\0\1\5"+
    "\5\11\2\5\5\11\4\5\126\11\2\5\2\0\2\5"+
    "\3\11\1\5\132\11\1\5\4\11\5\5\53\11\1\5"+
    "\136\11\21\5\40\11\60\5\320\11\100\5\375\11\3\5"+
    "\215\11\103\5\56\11\2\5\15\11\3\5\20\11\12\74"+
    "\2\11\24\5\57\11\1\0\4\5\12\0\1\5\37\11"+
    "\2\0\120\11\2\0\45\5\11\11\2\5\147\11\2\5"+
    "\65\11\2\5\11\11\52\5\15\11\1\0\3\11\1\0"+
    "\4\11\1\0\27\11\5\0\4\5\1\0\13\5\1\11"+
    "\7\5\64\11\14\5\2\0\62\11\22\0\12\5\12\74"+
    "\6\5\22\0\6\11\3\5\1\11\1\5\2\11\1\0"+
    "\12\74\34\11\10\0\2\5\27\11\15\0\14\5\35\11"+
    "\3\5\4\0\57\11\16\0\16\5\1\11\12\74\6\5"+
    "\5\11\1\0\12\11\12\74\5\11\1\5\51\11\16\0"+
    "\11\5\3\11\1\0\10\11\2\0\2\5\12\74\6\5"+
    "\27\11\3\5\1\11\3\0\62\11\1\0\1\11\3\0"+
    "\2\11\2\0\5\11\2\0\1\11\1\0\1\11\30\5"+
    "\3\11\2\5\13\11\5\0\2\5\3\11\2\0\12\5"+
    "\6\11\2\5\6\11\2\5\6\11\11\5\7\11\1\5"+
    "\7\11\1\5\53\11\1\5\16\11\6\5\163\11\10\0"+
    "\1\5\2\0\2\5\12\74\6\5\244\11\14\5\27\11"+
    "\4\5\61\11\4\5\u0100\76\156\11\2\5\152\11\46\5"+
    "\7\11\14\5\5\11\5\5\1\11\1\0\12\11\1\5"+
    "\15\11\1\5\5\11\1\5\1\11\1\5\2\11\1\5"+
    "\2\11\1\5\154\11\41\5\153\11\22\5\100\11\2\5"+
    "\66\11\50\5\15\11\3\5\20\0\20\5\20\0\3\5"+
    "\2\11\30\5\3\11\31\5\1\11\6\5\5\11\1\5"+
    "\207\11\2\5\1\0\4\5\1\11\13\5\12\74\7\5"+
    "\32\11\4\5\1\11\1\5\32\11\13\5\131\11\3\5"+
    "\6\11\2\5\6\11\2\5\6\11\2\5\3\11\3\5"+
    "\2\11\3\5\2\11\22\5\3\0\4\5\14\11\1\5"+
    "\32\11\1\5\23\11\1\5\2\11\1\5\17\11\2\5"+
    "\16\11\42\5\173\11\105\5\65\11\210\5\1\0\202\5"+
    "\35\11\3\5\61\11\17\5\1\0\37\5\40\11\15\5"+
    "\36\11\5\5\46\11\5\0\5\5\36\11\2\5\44\11"+
    "\4\5\10\11\1\5\5\11\52\5\236\11\2\5\12\74"+
    "\6\5\44\11\4\5\44\11\4\5\50\11\10\5\64\11"+
    "\234\5\67\11\11\5\26\11\12\5\10\11\230\5\6\11"+
    "\2\5\1\11\1\5\54\11\1\5\2\11\3\5\1\11"+
    "\2\5\27\11\12\5\27\11\11\5\37\11\101\5\23\11"+
    "\1\5\2\11\12\5\26\11\12\5\32\11\106\5\70\11"+
    "\6\5\2\11\100\5\1\11\3\0\1\5\2\0\5\5"+
    "\4\0\4\11\1\5\3\11\1\5\35\11\2\5\3\0"+
    "\4\5\1\0\40\5\35\11\3\5\35\11\43\5\10\11"+
    "\1\5\34\11\2\0\31\5\66\11\12\5\26\11\12\5"+
    "\23\11\15\5\22\11\156\5\111\11\67\5\63\11\15\5"+
    "\63\11\15\5\44\11\4\0\10\5\12\74\u0146\5\52\11"+
    "\1\5\2\0\3\5\2\11\116\5\35\11\12\5\1\11"+
    "\10\5\26\11\13\0\137\5\25\11\33\5\27\11\11\5"+
    "\3\0\65\11\17\0\37\5\12\74\17\5\4\0\55\11"+
    "\13\0\2\5\1\0\17\5\1\0\2\5\31\11\7\5"+
    "\12\74\6\5\3\0\44\11\16\0\1\5\12\74\4\5"+
    "\1\11\2\0\1\11\10\5\43\11\1\0\2\5\1\11"+
    "\11\5\3\0\60\11\16\0\4\11\4\5\4\0\1\5"+
    "\2\0\12\74\1\11\1\5\1\11\43\5\22\11\1\5"+
    "\31\11\14\0\6\5\1\0\101\5\7\11\1\5\1\11"+
    "\1\5\4\11\1\5\17\11\1\5\12\11\7\5\57\11"+
    "\14\0\5\5\12\74\6\5\4\0\1\5\10\11\2\5"+
    "\2\11\2\5\26\11\1\5\7\11\1\5\2\11\1\5"+
    "\5\11\1\5\2\0\1\11\7\0\2\5\2\0\2\5"+
    "\3\0\2\5\1\11\6\5\1\0\5\5\5\11\2\0"+
    "\2\5\7\0\3\5\5\0\213\5\65\11\22\0\4\11"+
    "\5\5\12\74\4\5\1\0\3\11\36\5\60\11\24\0"+
    "\2\11\1\5\1\11\10\5\12\74\246\5\57\11\7\0"+
    "\2\5\11\0\27\5\4\11\2\0\42\5\60\11\21\0"+
    "\3\5\1\11\13\5\12\74\46\5\53\11\15\0\1\11"+
    "\7\5\12\74\66\5\33\11\2\5\17\0\4\5\12\74"+
    "\306\5\54\11\17\0\145\5\100\11\12\74\25\5\10\11"+
    "\2\5\1\11\2\5\10\11\1\5\2\11\1\5\30\11"+
    "\6\0\1\5\2\0\2\5\4\0\1\11\1\0\1\11"+
    "\2\0\14\5\12\0\106\5\10\11\2\5\47\11\7\0"+
    "\2\5\7\0\1\11\1\5\1\11\1\0\33\5\1\11"+
    "\12\0\50\11\7\0\1\11\4\0\10\5\1\0\10\5"+
    "\1\11\13\0\56\11\20\0\3\5\1\11\42\5\71\11"+
    "\7\5\11\11\1\5\45\11\10\0\1\5\10\0\1\11"+
    "\17\5\12\74\30\5\36\11\2\5\26\0\1\5\16\0"+
    "\111\5\7\11\1\5\2\11\1\5\46\11\6\0\3\5"+
    "\1\0\1\5\2\0\1\5\7\0\1\11\1\0\10\5"+
    "\12\74\6\5\6\11\1\5\2\11\1\5\40\11\5\0"+
    "\1\5\2\0\1\5\5\0\1\11\7\5\12\74\u0136\5"+
    "\23\11\4\0\271\5\1\11\54\5\4\11\37\5\232\11"+
    "\146\5\157\11\21\5\304\11\274\5\57\11\1\5\11\0"+
    "\307\5\107\11\271\5\71\11\7\5\37\11\1\5\12\74"+
    "\146\5\36\11\2\5\5\0\13\5\60\11\7\0\11\5"+
    "\4\11\14\5\12\74\11\5\25\11\5\5\23\11\260\5"+
    "\100\11\200\5\113\11\4\5\1\0\1\11\67\0\7\5"+
    "\4\0\15\11\100\5\2\11\1\5\1\11\1\0\13\5"+
    "\2\0\16\5\370\11\10\5\326\11\52\5\11\11\367\5"+
    "\37\11\61\5\3\11\21\5\4\11\10\5\u018c\11\4\5"+
    "\153\11\5\5\15\11\3\5\11\11\7\5\12\11\3\5"+
    "\2\0\1\5\4\0\301\5\5\0\3\5\26\0\2\5"+
    "\7\0\36\5\4\0\224\5\3\0\273\5\125\11\1\5"+
    "\107\11\1\5\2\11\2\5\1\11\2\5\2\11\2\5"+
    "\4\11\1\5\14\11\1\5\1\11\1\5\7\11\1\5"+
    "\101\11\1\5\4\11\2\5\10\11\1\5\7\11\1\5"+
    "\34\11\1\5\4\11\1\5\5\11\1\5\1\11\3\5"+
    "\7\11\1\5\u0154\11\2\5\31\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\10\11\2\5\62\74\67\0\4\5\62\0\10\5\1\0"+
    "\16\5\1\0\26\5\5\0\1\5\17\0\120\5\7\0"+
    "\1\5\21\0\2\5\7\0\1\5\2\0\1\5\5\0"+
    "\325\5\55\11\3\5\7\0\7\11\2\5\12\74\4\5"+
    "\1\11\u0171\5\54\11\4\0\12\74\5\5\306\11\13\5"+
    "\7\0\51\5\104\11\7\0\1\11\4\5\12\74\u0156\5"+
    "\1\11\117\5\4\11\1\5\33\11\1\5\2\11\1\5"+
    "\1\11\2\5\1\11\1\5\12\11\1\5\4\11\1\5"+
    "\1\11\1\5\1\11\6\5\1\11\4\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\3\11\1\5\2\11\1\5"+
    "\1\11\2\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\2\11\1\5\1\11\2\5"+
    "\4\11\1\5\7\11\1\5\4\11\1\5\4\11\1\5"+
    "\1\11\1\5\12\11\1\5\21\11\5\5\3\11\1\5"+
    "\5\11\1\5\21\11\u0134\5\12\0\6\5\336\11\42\5"+
    "\65\11\13\5\336\11\2\5\u0182\11\16\5\u0131\11\37\5"+
    "\36\11\342\5\113\11\266\5\1\0\36\5\140\0\200\5"+
    "\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\16\6\1\35\1\36"+
    "\1\37\1\40\1\1\1\2\2\5\1\41\1\42\6\41"+
    "\1\43\2\44\2\41\1\1\1\45\1\4\1\0\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\0\1\54\1\55"+
    "\1\56\1\57\1\21\2\0\1\60\1\61\1\62\13\6"+
    "\1\63\11\6\1\64\1\65\2\0\2\5\1\66\1\41"+
    "\10\0\1\67\1\70\1\71\1\55\1\0\1\72\3\6"+
    "\1\0\4\6\1\73\1\74\3\6\1\0\5\6\1\75"+
    "\1\6\2\0\3\76\3\77\1\100\3\101\3\102\3\103"+
    "\3\104\1\0\1\105\1\72\1\6\1\106\1\6\1\107"+
    "\2\6\1\0\1\110\3\6\1\111\3\6\1\112\2\6"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\2\6\1\123\3\6\1\0\4\6\1\124\2\6\1\125"+
    "\1\6\1\126\1\127\1\6\1\130\1\131\1\132\4\6"+
    "\1\133\1\134\1\135\1\6\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u0237\0\u0237\0\u0237\0\u046e\0\u0237\0\u04ad"+
    "\0\u04ec\0\u0237\0\u052b\0\u0237\0\u0237\0\u056a\0\u05a9\0\u05e8"+
    "\0\u0237\0\u0237\0\u0237\0\u0237\0\u0237\0\u0237\0\u0627\0\u0666"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0237\0\u0999\0\u0237\0\u09d8"+
    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0237"+
    "\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0ccc"+
    "\0\u0d89\0\u0d89\0\u0237\0\u0237\0\u0dc8\0\u0237\0\u0237\0\u0237"+
    "\0\u0237\0\u0237\0\u0237\0\u0e07\0\u0237\0\u0e46\0\u0237\0\u0237"+
    "\0\u0237\0\u0e85\0\u0a17\0\u0237\0\u0237\0\u0237\0\u0ec4\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u03b1\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4"+
    "\0\u12f3\0\u1332\0\u1371\0\u0237\0\u0237\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u0237\0\u14ac\0\u0bd0\0\u0c0f\0\u14eb\0\u152a\0\u0c4e"+
    "\0\u0c8d\0\u1569\0\u15a8\0\u0237\0\u0237\0\u15e7\0\u0237\0\u1626"+
    "\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u03b1\0\u03b1\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998"+
    "\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u03b1\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\u0237\0\u1b12\0\u1b90\0\u0237\0\u1b51\0\u1bcf\0\u0237\0\u0237"+
    "\0\u14eb\0\u1c0e\0\u0237\0\u152a\0\u1c4d\0\u0237\0\u1569\0\u1c8c"+
    "\0\u0237\0\u15a8\0\u1ccb\0\u15e7\0\u0237\0\u0237\0\u1d0a\0\u03b1"+
    "\0\u1d49\0\u0237\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3"+
    "\0\u1f02\0\u0237\0\u1f41\0\u1f80\0\u1fbf\0\u03b1\0\u1ffe\0\u203d"+
    "\0\u0237\0\u0237\0\u0237\0\u0237\0\u0237\0\u0237\0\u03b1\0\u03b1"+
    "\0\u207c\0\u20bb\0\u0237\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6"+
    "\0\u2235\0\u2274\0\u22b3\0\u03b1\0\u22f2\0\u2331\0\u03b1\0\u2370"+
    "\0\u03b1\0\u0237\0\u23af\0\u03b1\0\u03b1\0\u03b1\0\u23ee\0\u242d"+
    "\0\u246c\0\u24ab\0\u03b1\0\u03b1\0\u03b1\0\u24ea\0\u03b1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\13\1\15\1\12\1\13\1\16"+
    "\1\17\1\20\1\17\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\20\1\43\1\44"+
    "\1\45\1\46\1\20\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\20\1\55\1\20\1\56\2\20\1\57\1\60"+
    "\1\61\1\62\1\63\1\20\1\64\1\20\1\65\1\66"+
    "\1\67\1\70\1\14\1\71\1\14\2\12\1\72\1\14"+
    "\1\72\1\15\1\12\1\72\1\16\1\73\1\20\1\74"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\20\1\43\1\44\1\45\1\46\1\20"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\20\1\55"+
    "\1\20\1\56\2\20\1\57\1\60\1\61\1\62\1\63"+
    "\1\20\1\64\1\20\1\65\1\66\1\67\1\70\1\14"+
    "\1\71\1\14\1\12\2\75\3\12\7\75\1\76\22\75"+
    "\1\77\33\75\1\12\1\75\2\12\100\100\1\101\1\100"+
    "\1\101\2\100\1\101\3\100\1\102\65\100\1\103\1\100"+
    "\1\103\2\100\1\103\1\100\1\104\66\100\1\105\1\106"+
    "\1\12\1\107\1\12\1\105\1\106\64\105\1\12\1\105"+
    "\2\12\2\110\3\12\66\110\1\12\1\110\2\12\2\111"+
    "\3\112\10\111\1\113\55\111\1\112\1\111\2\112\100\0"+
    "\1\13\1\0\1\13\2\0\1\13\71\0\1\14\76\0"+
    "\2\14\74\0\2\16\1\0\1\16\1\0\2\16\1\114"+
    "\27\16\1\115\37\16\2\17\3\0\66\17\1\0\1\17"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\25\20\4\0\2\20\15\0\1\116\65\0\1\117"+
    "\114\0\1\120\100\0\1\121\70\0\1\122\2\0\1\123"+
    "\3\0\1\124\1\125\1\126\11\0\1\127\1\0\1\130"+
    "\32\0\1\126\25\0\1\126\1\0\1\33\7\0\1\131"+
    "\10\0\1\132\3\0\1\131\21\0\1\133\33\0\1\134"+
    "\76\0\1\135\76\0\1\136\45\0\1\20\10\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\17\20\1\137\5\20"+
    "\4\0\2\20\2\0\1\20\10\0\1\20\13\0\1\20"+
    "\7\0\1\20\4\0\1\140\2\20\1\141\6\20\1\142"+
    "\2\20\1\143\7\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\10\20\1\144"+
    "\14\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\12\20\1\145\1\20\1\146"+
    "\10\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\15\20\1\147\4\20\1\150"+
    "\2\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\12\20\1\151\12\20\4\0"+
    "\2\20\2\0\1\20\10\0\1\20\13\0\1\20\7\0"+
    "\1\20\4\0\5\20\1\152\17\20\4\0\2\20\2\0"+
    "\1\20\10\0\1\20\13\0\1\20\7\0\1\20\4\0"+
    "\15\20\1\153\2\20\1\154\4\20\4\0\2\20\2\0"+
    "\1\20\10\0\1\20\13\0\1\20\7\0\1\20\4\0"+
    "\21\20\1\155\3\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\1\156\24\20"+
    "\4\0\2\20\2\0\1\20\10\0\1\20\13\0\1\20"+
    "\7\0\1\20\4\0\4\20\1\157\20\20\4\0\2\20"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\16\20\1\160\4\20\1\161\1\20\4\0\2\20"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\17\20\1\162\5\20\4\0\2\20\2\0\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\7\20"+
    "\1\163\15\20\4\0\2\20\72\0\1\164\37\0\1\165"+
    "\70\0\1\126\1\0\1\133\20\0\1\132\25\0\1\133"+
    "\3\0\1\72\1\0\1\72\2\0\1\72\1\0\1\166"+
    "\1\0\1\167\64\0\2\17\3\0\62\17\1\170\3\17"+
    "\1\0\1\17\2\0\2\17\3\0\62\17\1\171\3\17"+
    "\1\0\1\17\4\0\1\172\76\0\1\172\11\0\1\173"+
    "\64\0\1\172\34\0\1\173\3\0\1\173\3\0\1\173"+
    "\6\0\1\173\2\0\1\173\1\0\1\173\14\0\1\174"+
    "\1\0\1\174\2\0\1\174\3\0\1\175\153\0\1\176"+
    "\1\0\1\177\6\0\1\200\1\0\1\200\2\0\1\200"+
    "\1\0\1\201\155\0\1\202\1\0\1\203\7\0\1\204"+
    "\75\0\1\107\1\204\1\107\2\0\1\107\71\0\1\107"+
    "\1\0\1\107\2\0\1\107\72\0\1\205\3\0\1\205"+
    "\70\0\2\16\1\0\1\16\1\0\72\16\23\0\1\206"+
    "\100\0\1\126\20\0\1\132\3\0\1\207\21\0\1\126"+
    "\22\0\1\210\1\0\1\210\2\0\1\211\46\0\1\211"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\4\20\1\212\20\20\4\0\2\20\2\0\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\20\20"+
    "\1\213\1\214\3\20\4\0\2\20\2\0\1\20\5\0"+
    "\1\215\2\0\1\20\13\0\1\20\7\0\1\20\4\0"+
    "\25\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\1\216\24\20\4\0\2\20"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\14\20\1\217\10\20\4\0\2\20\2\0\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\17\20"+
    "\1\220\5\20\4\0\2\20\2\0\1\20\10\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\20\20\1\221\4\20"+
    "\4\0\2\20\2\0\1\20\10\0\1\20\13\0\1\20"+
    "\7\0\1\20\4\0\3\20\1\222\21\20\4\0\2\20"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\17\20\1\223\5\20\4\0\2\20\2\0\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\14\20"+
    "\1\224\10\20\4\0\2\20\2\0\1\20\10\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\15\20\1\225\7\20"+
    "\4\0\2\20\2\0\1\20\10\0\1\20\13\0\1\20"+
    "\7\0\1\20\4\0\1\226\24\20\4\0\2\20\2\0"+
    "\1\20\5\0\1\227\2\0\1\20\13\0\1\20\7\0"+
    "\1\20\4\0\25\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\7\20\1\230"+
    "\15\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\17\20\1\231\5\20\4\0"+
    "\2\20\2\0\1\20\10\0\1\20\13\0\1\20\7\0"+
    "\1\20\4\0\21\20\1\232\3\20\4\0\2\20\2\0"+
    "\1\20\10\0\1\20\13\0\1\20\7\0\1\20\4\0"+
    "\13\20\1\233\11\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\10\20\1\234"+
    "\14\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\24\20\1\235\4\0\2\20"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\10\20\1\236\14\20\4\0\2\20\71\0\1\237"+
    "\76\0\1\240\7\0\1\17\1\170\1\241\1\242\1\243"+
    "\1\17\1\170\64\17\1\241\1\17\1\241\1\0\1\17"+
    "\1\171\1\244\1\245\1\246\1\17\1\171\64\17\1\244"+
    "\1\17\1\244\3\0\1\247\75\0\1\176\1\250\1\251"+
    "\1\252\1\0\1\176\64\0\1\250\1\0\1\250\2\0"+
    "\1\177\1\253\1\254\1\255\1\0\1\177\64\0\1\253"+
    "\1\0\1\253\2\0\1\202\1\256\1\257\1\260\1\0"+
    "\1\202\64\0\1\256\1\0\1\256\2\0\1\203\1\261"+
    "\1\262\1\263\1\0\1\203\64\0\1\261\1\0\1\261"+
    "\2\0\1\264\1\265\1\264\2\0\1\264\115\0\1\211"+
    "\46\0\1\211\27\0\1\211\24\0\1\266\21\0\1\211"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\1\267\24\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\4\20\1\270"+
    "\20\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\2\20\1\271\22\20\4\0"+
    "\2\20\2\0\6\272\1\215\6\272\1\0\61\272\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\20\20"+
    "\1\273\4\20\4\0\2\20\2\0\1\20\10\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\21\20\1\274\3\20"+
    "\4\0\2\20\2\0\1\20\5\0\1\275\2\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\25\20\4\0\2\20"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\4\20\1\276\20\20\4\0\2\20\2\0\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\2\20"+
    "\1\277\22\20\4\0\2\20\2\0\1\20\10\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\1\20\1\300\23\20"+
    "\4\0\2\20\2\0\1\20\10\0\1\20\13\0\1\20"+
    "\7\0\1\20\4\0\3\20\1\301\21\20\4\0\2\20"+
    "\2\0\6\302\1\227\6\302\1\0\61\302\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\4\20\1\303"+
    "\20\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\5\20\1\304\17\20\4\0"+
    "\2\20\2\0\1\20\10\0\1\20\13\0\1\20\7\0"+
    "\1\20\4\0\22\20\1\305\2\20\4\0\2\20\2\0"+
    "\1\20\10\0\1\20\13\0\1\20\7\0\1\20\4\0"+
    "\3\20\1\306\21\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\21\20\1\307"+
    "\3\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\12\20\1\310\12\20\4\0"+
    "\2\20\3\0\1\237\1\241\1\242\1\243\1\0\1\237"+
    "\64\0\1\241\1\0\1\241\2\0\1\240\1\244\1\245"+
    "\1\246\1\0\1\240\64\0\1\244\1\0\1\244\3\0"+
    "\1\311\76\0\1\312\76\0\1\313\76\0\1\314\76\0"+
    "\1\315\76\0\1\316\74\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\11\20\1\317\13\20\4\0"+
    "\2\20\2\0\1\20\10\0\1\20\13\0\1\20\7\0"+
    "\1\20\4\0\7\20\1\320\15\20\4\0\2\20\2\0"+
    "\1\20\10\0\1\20\13\0\1\20\7\0\1\20\4\0"+
    "\20\20\1\321\4\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\10\20\1\322"+
    "\14\20\4\0\2\20\2\0\6\323\1\275\6\323\1\0"+
    "\61\323\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\10\20\1\324\14\20\4\0\2\20\2\0\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\21\20"+
    "\1\325\3\20\4\0\2\20\2\0\1\20\10\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\1\326\24\20\4\0"+
    "\2\20\2\0\1\20\5\0\1\327\2\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\25\20\4\0\2\20\2\0"+
    "\1\20\10\0\1\20\13\0\1\20\7\0\1\20\4\0"+
    "\17\20\1\330\5\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\15\20\1\331"+
    "\7\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\17\20\1\332\5\20\4\0"+
    "\2\20\2\0\1\20\10\0\1\20\13\0\1\20\7\0"+
    "\1\20\4\0\2\20\1\333\22\20\4\0\2\20\2\0"+
    "\1\20\10\0\1\20\13\0\1\20\7\0\1\20\4\0"+
    "\4\20\1\334\20\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\3\20\1\335"+
    "\21\20\4\0\2\20\2\0\1\20\10\0\1\20\13\0"+
    "\1\20\7\0\1\20\4\0\14\20\1\336\10\20\4\0"+
    "\2\20\2\0\1\20\10\0\1\20\13\0\1\20\7\0"+
    "\1\20\4\0\5\20\1\337\17\20\4\0\2\20\2\0"+
    "\1\20\10\0\1\20\13\0\1\20\7\0\1\20\4\0"+
    "\10\20\1\340\14\20\4\0\2\20\2\0\1\20\10\0"+
    "\1\20\13\0\1\20\7\0\1\20\4\0\12\20\1\341"+
    "\12\20\4\0\2\20\2\0\6\342\1\327\6\342\1\0"+
    "\61\342\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\23\20\1\343\1\20\4\0\2\20\2\0\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\17\20"+
    "\1\344\5\20\4\0\2\20\2\0\1\20\10\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\14\20\1\345\10\20"+
    "\4\0\2\20\2\0\1\20\10\0\1\20\13\0\1\20"+
    "\7\0\1\20\4\0\7\20\1\346\15\20\4\0\2\20"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\4\20\1\347\20\20\4\0\2\20\2\0\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\22\20"+
    "\1\350\2\20\4\0\2\20\2\0\1\20\10\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\15\20\1\351\7\20"+
    "\4\0\2\20\2\0\1\20\10\0\1\20\13\0\1\20"+
    "\7\0\1\20\4\0\10\20\1\352\14\20\4\0\2\20"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\5\20\1\353\17\20\4\0\2\20\2\0\1\20"+
    "\10\0\1\20\13\0\1\20\7\0\1\20\4\0\4\20"+
    "\1\354\20\20\4\0\2\20\2\0\1\20\10\0\1\20"+
    "\13\0\1\20\7\0\1\20\4\0\14\20\1\355\10\20"+
    "\4\0\2\20\2\0\1\20\10\0\1\20\13\0\1\20"+
    "\7\0\1\20\4\0\20\20\1\356\4\20\4\0\2\20"+
    "\2\0\1\20\10\0\1\20\13\0\1\20\7\0\1\20"+
    "\4\0\4\20\1\357\20\20\4\0\2\20\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9513];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\10\1\3\11\1\1\1\11\2\1\1\11"+
    "\1\1\2\11\3\1\6\11\16\1\1\11\1\1\1\11"+
    "\10\1\1\11\12\1\2\11\1\0\6\11\1\0\1\11"+
    "\1\1\3\11\2\0\3\11\25\1\2\11\2\0\2\1"+
    "\1\11\1\1\10\0\2\11\1\1\1\11\1\0\4\1"+
    "\1\0\11\1\1\0\7\1\2\0\1\11\2\1\1\11"+
    "\2\1\2\11\2\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\1\0\2\11\3\1\1\11\2\1\1\0\4\1"+
    "\1\11\6\1\6\11\4\1\1\11\3\1\1\0\12\1"+
    "\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private Stack<Integer> stack = new Stack<>();

    public static FlexAdapter getAdapter() {
        return new FlexAdapter(new MatlabLexer());
    }

    private MatlabLexer() {
        this(null);
    }

    private void yypushState(int newState) {
      stack.push(yystate());
      yybegin(newState);
    }

    private void yypopState() {
        if (stack.isEmpty()) return;
        yybegin(stack.pop());
    }

    private void yyclearStack() {
        while (!stack.isEmpty()) stack.pop();
    }

    private void stopLookForCtrans() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
    }

    private void lookForCtrans() {
        if (yystate() != LOOK_FOR_CTRANS) yypushState(LOOK_FOR_CTRANS);
    }

    private void startWsDoesNotMatter() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        yypushState(YYINITIAL);
    }

    private void stopWsDoesNotMatter() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        if (yystate() == YYINITIAL) yypopState();
    }

    private void startWsMatters() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        yypushState(WS_MATTERS);
    }

    private void stopWsMatters() {
        if (yystate() == LOOK_FOR_CTRANS) yypopState();
        if (yystate() == WS_MATTERS) yypopState();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MatlabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return null;
            }  // fall though
            case 240: break;
            case WS_MATTERS: {
              return null;
            }  // fall though
            case 241: break;
            case LOOK_FOR_CTRANS: {
              return null;
            }  // fall though
            case 242: break;
            case SINGLE_QOUTE_STRING_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return SINGLE_QUOTE_STRING;
            }  // fall though
            case 243: break;
            case BLOCKCOMMENT_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return COMMENT;
            }  // fall though
            case 244: break;
            case BLOCK_HASH_COMMENT_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return COMMENT;
            }  // fall though
            case 245: break;
            case LOOK_FOR_LINECOMMENT: {
              yyclearStack(); yybegin(YYINITIAL); return COMMENT;
            }  // fall though
            case 246: break;
            case LINECOMMENT_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return COMMENT;
            }  // fall though
            case 247: break;
            case FILE_NAME_STATE: {
              yyclearStack(); yybegin(YYINITIAL); return FILE_NAME;
            }  // fall though
            case 248: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 95: break;
          case 2:
            { if (yystate() == LOOK_FOR_CTRANS &&
                                    !stack.isEmpty() &&
                                    stack.peek() == WS_MATTERS) {
                                yypopState();
                           }
                            return WHITE_SPACE;
            }
          // fall through
          case 96: break;
          case 3:
            { stopLookForCtrans(); return NEWLINE;
            }
          // fall through
          case 97: break;
          case 4:
            { lookForCtrans(); return DOUBLE_QUOTE_STRING;
            }
          // fall through
          case 98: break;
          case 5:
            { stopLookForCtrans(); return COMMENT;
            }
          // fall through
          case 99: break;
          case 6:
            { lookForCtrans(); return IDENTIFIER;
            }
          // fall through
          case 100: break;
          case 7:
            { stopLookForCtrans(); return MATRIX_AND;
            }
          // fall through
          case 101: break;
          case 8:
            { if (yystate() == LOOK_FOR_CTRANS) {
                                return CTRANS;
                            } else {
                                yypushState(SINGLE_QOUTE_STRING_STATE);
                            }
            }
          // fall through
          case 102: break;
          case 9:
            { startWsDoesNotMatter(); return LPARENTH;
            }
          // fall through
          case 103: break;
          case 10:
            { stopWsDoesNotMatter(); lookForCtrans(); return RPARENTH;
            }
          // fall through
          case 104: break;
          case 11:
            { stopLookForCtrans(); return MUL;
            }
          // fall through
          case 105: break;
          case 12:
            { stopLookForCtrans(); return PLUS;
            }
          // fall through
          case 106: break;
          case 13:
            { stopLookForCtrans(); return COMMA;
            }
          // fall through
          case 107: break;
          case 14:
            { stopLookForCtrans(); return MINUS;
            }
          // fall through
          case 108: break;
          case 15:
            { stopLookForCtrans(); return DOT;
            }
          // fall through
          case 109: break;
          case 16:
            { stopLookForCtrans(); return RDIV;
            }
          // fall through
          case 110: break;
          case 17:
            { lookForCtrans(); return INTEGER;
            }
          // fall through
          case 111: break;
          case 18:
            { stopLookForCtrans(); return COLON;
            }
          // fall through
          case 112: break;
          case 19:
            { stopLookForCtrans(); return SEMICOLON;
            }
          // fall through
          case 113: break;
          case 20:
            { stopLookForCtrans(); return LESS;
            }
          // fall through
          case 114: break;
          case 21:
            { stopLookForCtrans(); return ASSIGN;
            }
          // fall through
          case 115: break;
          case 22:
            { stopLookForCtrans(); return MORE;
            }
          // fall through
          case 116: break;
          case 23:
            { stopLookForCtrans(); return QUESTION_MARK;
            }
          // fall through
          case 117: break;
          case 24:
            { stopLookForCtrans(); return AT;
            }
          // fall through
          case 118: break;
          case 25:
            { startWsMatters(); return LBRACKET;
            }
          // fall through
          case 119: break;
          case 26:
            { stopLookForCtrans(); return LDIV;
            }
          // fall through
          case 120: break;
          case 27:
            { stopWsMatters(); lookForCtrans(); return RBRACKET;
            }
          // fall through
          case 121: break;
          case 28:
            { stopLookForCtrans(); return POW;
            }
          // fall through
          case 122: break;
          case 29:
            { startWsMatters(); return LBRACE;
            }
          // fall through
          case 123: break;
          case 30:
            { stopLookForCtrans(); return MATRIX_OR;
            }
          // fall through
          case 124: break;
          case 31:
            { stopWsMatters(); lookForCtrans(); return RBRACE;
            }
          // fall through
          case 125: break;
          case 32:
            { stopLookForCtrans(); return TILDA;
            }
          // fall through
          case 126: break;
          case 33:
            { 
            }
          // fall through
          case 127: break;
          case 34:
            { yypopState(); lookForCtrans(); return SINGLE_QUOTE_STRING;
            }
          // fall through
          case 128: break;
          case 35:
            { yypopState(); yypushState(LINECOMMENT_STATE);
            }
          // fall through
          case 129: break;
          case 36:
            { return WHITE_SPACE;
            }
          // fall through
          case 130: break;
          case 37:
            { yypopState();
            }
          // fall through
          case 131: break;
          case 38:
            { stopLookForCtrans(); return AND;
            }
          // fall through
          case 132: break;
          case 39:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { if (yystate() == LOOK_FOR_CTRANS) {
                              return TRANS;
                          } else {
                              return SINGLE_QUOTE_STRING;
                          }
            }
          // fall through
          case 133: break;
          case 40:
            { stopLookForCtrans(); return PLUSPLUS;
            }
          // fall through
          case 134: break;
          case 41:
            { stopLookForCtrans(); return MINUSMINUS;
            }
          // fall through
          case 135: break;
          case 42:
            { stopLookForCtrans(); return TRANS;
            }
          // fall through
          case 136: break;
          case 43:
            { stopLookForCtrans(); return DOT_MUL;
            }
          // fall through
          case 137: break;
          case 44:
            { stopLookForCtrans(); return DOT_RDIV;
            }
          // fall through
          case 138: break;
          case 45:
            { lookForCtrans(); return FLOAT;
            }
          // fall through
          case 139: break;
          case 46:
            { stopLookForCtrans(); return DOT_LDIV;
            }
          // fall through
          case 140: break;
          case 47:
            { stopLookForCtrans(); return DOT_POW;
            }
          // fall through
          case 141: break;
          case 48:
            { stopLookForCtrans(); return LESS_OR_EQUAL;
            }
          // fall through
          case 142: break;
          case 49:
            { stopLookForCtrans(); return EQUAL;
            }
          // fall through
          case 143: break;
          case 50:
            { stopLookForCtrans(); return MORE_OR_EQUAL;
            }
          // fall through
          case 144: break;
          case 51:
            { stopLookForCtrans(); return IF;
            }
          // fall through
          case 145: break;
          case 52:
            { stopLookForCtrans(); return OR;
            }
          // fall through
          case 146: break;
          case 53:
            { stopLookForCtrans(); return NOT_EQUAL;
            }
          // fall through
          case 147: break;
          case 54:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yypopState(); return SINGLE_QUOTE_STRING;
            }
          // fall through
          case 148: break;
          case 55:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yypopState(); return COMMENT;
            }
          // fall through
          case 149: break;
          case 56:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 1);
            { yypopState(); return FILE_NAME;
            }
          // fall through
          case 150: break;
          case 57:
            { stopLookForCtrans(); yypushState(LOOK_FOR_LINECOMMENT); return ELLIPSIS;
            }
          // fall through
          case 151: break;
          case 58:
            { lookForCtrans(); return FLOAT_EXPONENTIAL;
            }
          // fall through
          case 152: break;
          case 59:
            { stopLookForCtrans(); return END;
            }
          // fall through
          case 153: break;
          case 60:
            { stopLookForCtrans(); return FOR;
            }
          // fall through
          case 154: break;
          case 61:
            { stopLookForCtrans(); return TRY;
            }
          // fall through
          case 155: break;
          case 62:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { stopLookForCtrans(); yypushState(BLOCK_HASH_COMMENT_STATE);
            }
          // fall through
          case 156: break;
          case 63:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { stopLookForCtrans(); yypushState(BLOCKCOMMENT_STATE);
            }
          // fall through
          case 157: break;
          case 64:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { yypopState(); return SINGLE_QUOTE_STRING;
            }
          // fall through
          case 158: break;
          case 65:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yypushState(BLOCKCOMMENT_STATE);
            }
          // fall through
          case 159: break;
          case 66:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yypopState();
                               if (yystate() != BLOCKCOMMENT_STATE) return COMMENT;
            }
          // fall through
          case 160: break;
          case 67:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yypushState(BLOCK_HASH_COMMENT_STATE);
            }
          // fall through
          case 161: break;
          case 68:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yypopState();
                                   if (yystate() != BLOCK_HASH_COMMENT_STATE) return COMMENT;
            }
          // fall through
          case 162: break;
          case 69:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { stopLookForCtrans(); return ELLIPSIS;
            }
          // fall through
          case 163: break;
          case 70:
            { stopLookForCtrans(); return CASE;
            }
          // fall through
          case 164: break;
          case 71:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return CD;
            }
          // fall through
          case 165: break;
          case 72:
            { stopLookForCtrans(); return ELSE;
            }
          // fall through
          case 166: break;
          case 73:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 2);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return LS;
            }
          // fall through
          case 167: break;
          case 74:
            { stopLookForCtrans(); return SPMD;
            }
          // fall through
          case 168: break;
          case 75:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { stopLookForCtrans(); yypushState(BLOCK_HASH_COMMENT_STATE);
            }
          // fall through
          case 169: break;
          case 76:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { stopLookForCtrans(); yypushState(BLOCKCOMMENT_STATE);
            }
          // fall through
          case 170: break;
          case 77:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yypushState(BLOCKCOMMENT_STATE);
            }
          // fall through
          case 171: break;
          case 78:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yypopState();
                               if (yystate() != BLOCKCOMMENT_STATE) return COMMENT;
            }
          // fall through
          case 172: break;
          case 79:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yypushState(BLOCK_HASH_COMMENT_STATE);
            }
          // fall through
          case 173: break;
          case 80:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yypopState();
                                   if (yystate() != BLOCK_HASH_COMMENT_STATE) return COMMENT;
            }
          // fall through
          case 174: break;
          case 81:
            { stopLookForCtrans(); return BREAK;
            }
          // fall through
          case 175: break;
          case 82:
            { stopLookForCtrans(); return CATCH;
            }
          // fall through
          case 176: break;
          case 83:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return DIR;
            }
          // fall through
          case 177: break;
          case 84:
            { stopLookForCtrans(); return WHILE;
            }
          // fall through
          case 178: break;
          case 85:
            { stopLookForCtrans(); return ELSEIF;
            }
          // fall through
          case 179: break;
          case 86:
            { stopLookForCtrans(); return GLOBAL;
            }
          // fall through
          case 180: break;
          case 87:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 4);
            { stopLookForCtrans(); yypushState(FILE_NAME_STATE); return LOAD;
            }
          // fall through
          case 181: break;
          case 88:
            { stopLookForCtrans(); return PARFOR;
            }
          // fall through
          case 182: break;
          case 89:
            { stopLookForCtrans(); return RETURN;
            }
          // fall through
          case 183: break;
          case 90:
            { stopLookForCtrans(); return SWITCH;
            }
          // fall through
          case 184: break;
          case 91:
            { stopLookForCtrans(); return CLASSDEF;
            }
          // fall through
          case 185: break;
          case 92:
            { stopLookForCtrans(); return CONTINUE;
            }
          // fall through
          case 186: break;
          case 93:
            { stopLookForCtrans(); return FUNCTION;
            }
          // fall through
          case 187: break;
          case 94:
            { stopLookForCtrans(); return OTHERWISE;
            }
          // fall through
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
